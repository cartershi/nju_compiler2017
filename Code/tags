!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADD	operand.h	/^        ASSIGN, ADD, SUB, MUL,$/;"	e	enum:InterCode_::__anon10
ADDRESS	operand.h	/^    enum { VARIABLE, CONSTANT, ADDRESS, LABEL, ID_STR, OPERATOR} kind;$/;"	e	enum:Operand_::__anon8
ARG	operand.h	/^        ARG, PARAM, REFASSIGN, DEC } kind;$/;"	e	enum:InterCode_::__anon10
ARRAY	tree.h	/^    enum { BASIC,ARRAY, STRUCTURE } kind;$/;"	e	enum:setype_struct::__anon4
ASSIGN	operand.h	/^        ASSIGN, ADD, SUB, MUL,$/;"	e	enum:InterCode_::__anon10
Args	syntax.y	/^Args:Exp COMMA Args {$$=addnode("Args",3,$1,$2,$3);}$/;"	l
BASIC	tree.h	/^    enum { BASIC,ARRAY, STRUCTURE } kind;$/;"	e	enum:setype_struct::__anon4
CALLFUNC	operand.h	/^        LABEL_GOTO, READ, WRITE, CALLFUNC, FUNCTION,$/;"	e	enum:InterCode_::__anon10
CONSTANT	operand.h	/^    enum { VARIABLE, CONSTANT, ADDRESS, LABEL, ID_STR, OPERATOR} kind;$/;"	e	enum:Operand_::__anon8
CompSt	syntax.y	/^CompSt:LC DefList StmtList RC {$$=addnode("CompSt",4,$1,$2,$3,$4);}$/;"	l
DEC	operand.h	/^        ARG, PARAM, REFASSIGN, DEC } kind;$/;"	e	enum:InterCode_::__anon10
DIV_	operand.h	/^        DIV_, RETURN_, JUMP, LABEL_CODE, LABEL_TRUE,$/;"	e	enum:InterCode_::__anon10
Dec	syntax.y	/^Dec:VarDec {$$=addnode("Dec",1,$1);}$/;"	l
DecList	syntax.y	/^DecList:Dec {$$=addnode("DecList",1,$1);}$/;"	l
Def	syntax.y	/^Def:Specifier DecList SEMI {$$=addnode("Def",3,$1,$2,$3);}$/;"	l
DefList	syntax.y	/^DefList:Def DefList {$$=addnode("DefList",2,$1,$2);}$/;"	l
EAARAY	tree.h	/^    enum {EINT=0,EFLOAT,EMISS,EAARAY,ESTRUCT}exp_type;   \/\/record the type of exp$/;"	e	enum:treenode::__anon2
EFLOAT	tree.h	/^    enum {EINT=0,EFLOAT,EMISS,EAARAY,ESTRUCT}exp_type;   \/\/record the type of exp$/;"	e	enum:treenode::__anon2
EINT	tree.h	/^    enum {EINT=0,EFLOAT,EMISS,EAARAY,ESTRUCT}exp_type;   \/\/record the type of exp$/;"	e	enum:treenode::__anon2
EMISS	tree.h	/^    enum {EINT=0,EFLOAT,EMISS,EAARAY,ESTRUCT}exp_type;   \/\/record the type of exp$/;"	e	enum:treenode::__anon2
EQ	operand.h	/^typedef enum {GT, LT, EQ, GE, LE, NE} op_def;$/;"	e	enum:__anon7
ESTRUCT	tree.h	/^    enum {EINT=0,EFLOAT,EMISS,EAARAY,ESTRUCT}exp_type;   \/\/record the type of exp$/;"	e	enum:treenode::__anon2
Exp	syntax.y	/^Exp:Exp ASSIGNOP Exp {$$=addnode("Exp",3,$1,$2,$3);}$/;"	l
ExtDecList	syntax.y	/^ExtDecList:VarDec {$$=addnode("ExtDecList",1,$1);}$/;"	l
ExtDef	syntax.y	/^ExtDef:Specifier ExtDecList SEMI {$$=addnode("ExtDef",3,$1,$2,$3);}$/;"	l
ExtDefList	syntax.y	/^ExtDefList:{$$=addnode("ExtDefList",0);}$/;"	l
FUNCTION	operand.h	/^        LABEL_GOTO, READ, WRITE, CALLFUNC, FUNCTION,$/;"	e	enum:InterCode_::__anon10
FunDec	syntax.y	/^FunDec:ID LP VarList RP {$$=addnode("FunDec",4,$1,$2,$3,$4);}$/;"	l
GE	operand.h	/^typedef enum {GT, LT, EQ, GE, LE, NE} op_def;$/;"	e	enum:__anon7
GT	operand.h	/^typedef enum {GT, LT, EQ, GE, LE, NE} op_def;$/;"	e	enum:__anon7
ID_STR	operand.h	/^    enum { VARIABLE, CONSTANT, ADDRESS, LABEL, ID_STR, OPERATOR} kind;$/;"	e	enum:Operand_::__anon8
InterCode	operand.h	/^typedef struct InterCode_ InterCode;$/;"	t	typeref:struct:InterCode_
InterCode_	operand.h	/^struct InterCode_$/;"	s
InterCode_::ADD	operand.h	/^        ASSIGN, ADD, SUB, MUL,$/;"	e	enum:InterCode_::__anon10
InterCode_::ARG	operand.h	/^        ARG, PARAM, REFASSIGN, DEC } kind;$/;"	e	enum:InterCode_::__anon10
InterCode_::ASSIGN	operand.h	/^        ASSIGN, ADD, SUB, MUL,$/;"	e	enum:InterCode_::__anon10
InterCode_::CALLFUNC	operand.h	/^        LABEL_GOTO, READ, WRITE, CALLFUNC, FUNCTION,$/;"	e	enum:InterCode_::__anon10
InterCode_::DEC	operand.h	/^        ARG, PARAM, REFASSIGN, DEC } kind;$/;"	e	enum:InterCode_::__anon10
InterCode_::DIV_	operand.h	/^        DIV_, RETURN_, JUMP, LABEL_CODE, LABEL_TRUE,$/;"	e	enum:InterCode_::__anon10
InterCode_::FUNCTION	operand.h	/^        LABEL_GOTO, READ, WRITE, CALLFUNC, FUNCTION,$/;"	e	enum:InterCode_::__anon10
InterCode_::JUMP	operand.h	/^        DIV_, RETURN_, JUMP, LABEL_CODE, LABEL_TRUE,$/;"	e	enum:InterCode_::__anon10
InterCode_::LABEL_CODE	operand.h	/^        DIV_, RETURN_, JUMP, LABEL_CODE, LABEL_TRUE,$/;"	e	enum:InterCode_::__anon10
InterCode_::LABEL_GOTO	operand.h	/^        LABEL_GOTO, READ, WRITE, CALLFUNC, FUNCTION,$/;"	e	enum:InterCode_::__anon10
InterCode_::LABEL_TRUE	operand.h	/^        DIV_, RETURN_, JUMP, LABEL_CODE, LABEL_TRUE,$/;"	e	enum:InterCode_::__anon10
InterCode_::MUL	operand.h	/^        ASSIGN, ADD, SUB, MUL,$/;"	e	enum:InterCode_::__anon10
InterCode_::PARAM	operand.h	/^        ARG, PARAM, REFASSIGN, DEC } kind;$/;"	e	enum:InterCode_::__anon10
InterCode_::READ	operand.h	/^        LABEL_GOTO, READ, WRITE, CALLFUNC, FUNCTION,$/;"	e	enum:InterCode_::__anon10
InterCode_::REFASSIGN	operand.h	/^        ARG, PARAM, REFASSIGN, DEC } kind;$/;"	e	enum:InterCode_::__anon10
InterCode_::RETURN_	operand.h	/^        DIV_, RETURN_, JUMP, LABEL_CODE, LABEL_TRUE,$/;"	e	enum:InterCode_::__anon10
InterCode_::SUB	operand.h	/^        ASSIGN, ADD, SUB, MUL,$/;"	e	enum:InterCode_::__anon10
InterCode_::WRITE	operand.h	/^        LABEL_GOTO, READ, WRITE, CALLFUNC, FUNCTION,$/;"	e	enum:InterCode_::__anon10
InterCode_::__anon11::__anon12::left	operand.h	/^        struct { Operand *right, *left; } assign;$/;"	m	struct:InterCode_::__anon11::__anon12	access:public
InterCode_::__anon11::__anon12::right	operand.h	/^        struct { Operand *right, *left; } assign;$/;"	m	struct:InterCode_::__anon11::__anon12	access:public
InterCode_::__anon11::__anon13::op1	operand.h	/^        struct { Operand *result, *op1, *op2; } binop;$/;"	m	struct:InterCode_::__anon11::__anon13	access:public
InterCode_::__anon11::__anon13::op2	operand.h	/^        struct { Operand *result, *op1, *op2; } binop;$/;"	m	struct:InterCode_::__anon11::__anon13	access:public
InterCode_::__anon11::__anon13::result	operand.h	/^        struct { Operand *result, *op1, *op2; } binop;$/;"	m	struct:InterCode_::__anon11::__anon13	access:public
InterCode_::__anon11::__anon14::result	operand.h	/^        struct { Operand *result; } sigop;$/;"	m	struct:InterCode_::__anon11::__anon14	access:public
InterCode_::__anon11::__anon15::goal	operand.h	/^        struct { Operand *op1, *op2, *op3, *goal; } jmp;$/;"	m	struct:InterCode_::__anon11::__anon15	access:public
InterCode_::__anon11::__anon15::op1	operand.h	/^        struct { Operand *op1, *op2, *op3, *goal; } jmp;$/;"	m	struct:InterCode_::__anon11::__anon15	access:public
InterCode_::__anon11::__anon15::op2	operand.h	/^        struct { Operand *op1, *op2, *op3, *goal; } jmp;$/;"	m	struct:InterCode_::__anon11::__anon15	access:public
InterCode_::__anon11::__anon15::op3	operand.h	/^        struct { Operand *op1, *op2, *op3, *goal; } jmp;$/;"	m	struct:InterCode_::__anon11::__anon15	access:public
InterCode_::__anon11::assign	operand.h	/^        struct { Operand *right, *left; } assign;$/;"	m	union:InterCode_::__anon11	typeref:struct:InterCode_::__anon11::__anon12	access:public
InterCode_::__anon11::binop	operand.h	/^        struct { Operand *result, *op1, *op2; } binop;$/;"	m	union:InterCode_::__anon11	typeref:struct:InterCode_::__anon11::__anon13	access:public
InterCode_::__anon11::jmp	operand.h	/^        struct { Operand *op1, *op2, *op3, *goal; } jmp;$/;"	m	union:InterCode_::__anon11	typeref:struct:InterCode_::__anon11::__anon15	access:public
InterCode_::__anon11::sigop	operand.h	/^        struct { Operand *result; } sigop;$/;"	m	union:InterCode_::__anon11	typeref:struct:InterCode_::__anon11::__anon14	access:public
InterCode_::kind	operand.h	/^        ARG, PARAM, REFASSIGN, DEC } kind;$/;"	m	struct:InterCode_	typeref:enum:InterCode_::__anon10	access:public
InterCode_::u	operand.h	/^    } u;$/;"	m	struct:InterCode_	typeref:union:InterCode_::__anon11	access:public
InterCodes	operand.h	/^typedef struct InterCodes_ InterCodes;$/;"	t	typeref:struct:InterCodes_
InterCodes_	operand.h	/^struct InterCodes_ { $/;"	s
InterCodes_::code	operand.h	/^    struct InterCode_ code; $/;"	m	struct:InterCodes_	typeref:struct:InterCodes_::InterCode_	access:public
InterCodes_::next	operand.h	/^    struct InterCodes_ *prev, *next;$/;"	m	struct:InterCodes_	typeref:struct:InterCodes_::	access:public
InterCodes_::prev	operand.h	/^    struct InterCodes_ *prev, *next;$/;"	m	struct:InterCodes_	typeref:struct:InterCodes_::InterCodes_	access:public
JUMP	operand.h	/^        DIV_, RETURN_, JUMP, LABEL_CODE, LABEL_TRUE,$/;"	e	enum:InterCode_::__anon10
LAB3	common.h	9;"	d
LABEL	operand.h	/^    enum { VARIABLE, CONSTANT, ADDRESS, LABEL, ID_STR, OPERATOR} kind;$/;"	e	enum:Operand_::__anon8
LABEL_CODE	operand.h	/^        DIV_, RETURN_, JUMP, LABEL_CODE, LABEL_TRUE,$/;"	e	enum:InterCode_::__anon10
LABEL_GOTO	operand.h	/^        LABEL_GOTO, READ, WRITE, CALLFUNC, FUNCTION,$/;"	e	enum:InterCode_::__anon10
LABEL_TRUE	operand.h	/^        DIV_, RETURN_, JUMP, LABEL_CODE, LABEL_TRUE,$/;"	e	enum:InterCode_::__anon10
LE	operand.h	/^typedef enum {GT, LT, EQ, GE, LE, NE} op_def;$/;"	e	enum:__anon7
LT	operand.h	/^typedef enum {GT, LT, EQ, GE, LE, NE} op_def;$/;"	e	enum:__anon7
MUL	operand.h	/^        ASSIGN, ADD, SUB, MUL,$/;"	e	enum:InterCode_::__anon10
NE	operand.h	/^typedef enum {GT, LT, EQ, GE, LE, NE} op_def;$/;"	e	enum:__anon7
OPERATOR	operand.h	/^    enum { VARIABLE, CONSTANT, ADDRESS, LABEL, ID_STR, OPERATOR} kind;$/;"	e	enum:Operand_::__anon8
Operand	operand.h	/^typedef struct Operand_ Operand;$/;"	t	typeref:struct:Operand_
Operand_	operand.h	/^struct Operand_ {$/;"	s
Operand_::ADDRESS	operand.h	/^    enum { VARIABLE, CONSTANT, ADDRESS, LABEL, ID_STR, OPERATOR} kind;$/;"	e	enum:Operand_::__anon8
Operand_::CONSTANT	operand.h	/^    enum { VARIABLE, CONSTANT, ADDRESS, LABEL, ID_STR, OPERATOR} kind;$/;"	e	enum:Operand_::__anon8
Operand_::ID_STR	operand.h	/^    enum { VARIABLE, CONSTANT, ADDRESS, LABEL, ID_STR, OPERATOR} kind;$/;"	e	enum:Operand_::__anon8
Operand_::LABEL	operand.h	/^    enum { VARIABLE, CONSTANT, ADDRESS, LABEL, ID_STR, OPERATOR} kind;$/;"	e	enum:Operand_::__anon8
Operand_::OPERATOR	operand.h	/^    enum { VARIABLE, CONSTANT, ADDRESS, LABEL, ID_STR, OPERATOR} kind;$/;"	e	enum:Operand_::__anon8
Operand_::VARIABLE	operand.h	/^    enum { VARIABLE, CONSTANT, ADDRESS, LABEL, ID_STR, OPERATOR} kind;$/;"	e	enum:Operand_::__anon8
Operand_::__anon9::lab_no	operand.h	/^        int lab_no;$/;"	m	union:Operand_::__anon9	access:public
Operand_::__anon9::name	operand.h	/^        char* name;$/;"	m	union:Operand_::__anon9	access:public
Operand_::__anon9::op_num	operand.h	/^        op_def op_num;$/;"	m	union:Operand_::__anon9	access:public
Operand_::__anon9::value	operand.h	/^        int value;$/;"	m	union:Operand_::__anon9	access:public
Operand_::__anon9::var_no	operand.h	/^        int var_no;$/;"	m	union:Operand_::__anon9	access:public
Operand_::kind	operand.h	/^    enum { VARIABLE, CONSTANT, ADDRESS, LABEL, ID_STR, OPERATOR} kind;$/;"	m	struct:Operand_	typeref:enum:Operand_::__anon8	access:public
Operand_::u	operand.h	/^    } u;$/;"	m	struct:Operand_	typeref:union:Operand_::__anon9	access:public
OptTag	syntax.y	/^OptTag:ID {$$=addnode("OptTag",1,$1);}$/;"	l
PARAM	operand.h	/^        ARG, PARAM, REFASSIGN, DEC } kind;$/;"	e	enum:InterCode_::__anon10
ParamDec	syntax.y	/^ParamDec:Specifier VarDec {$$=addnode("ParamDec",2,$1,$2);}$/;"	l
Program	syntax.y	/^Program:ExtDefList{$/;"	l
READ	operand.h	/^        LABEL_GOTO, READ, WRITE, CALLFUNC, FUNCTION,$/;"	e	enum:InterCode_::__anon10
REFASSIGN	operand.h	/^        ARG, PARAM, REFASSIGN, DEC } kind;$/;"	e	enum:InterCode_::__anon10
RETURN_	operand.h	/^        DIV_, RETURN_, JUMP, LABEL_CODE, LABEL_TRUE,$/;"	e	enum:InterCode_::__anon10
STRUCTURE	tree.h	/^    enum { BASIC,ARRAY, STRUCTURE } kind;$/;"	e	enum:setype_struct::__anon4
SUB	operand.h	/^        ASSIGN, ADD, SUB, MUL,$/;"	e	enum:InterCode_::__anon10
Specifier	syntax.y	/^Specifier:TYPE {$$=addnode("Specifier",1,$1);}$/;"	l
Stmt	syntax.y	/^Stmt:Exp SEMI {$$=addnode("Stmt",2,$1,$2);}$/;"	l
StmtList	syntax.y	/^StmtList:Stmt StmtList {$$=addnode("StmtList",2,$1,$2);}$/;"	l
StructSpecifier	syntax.y	/^StructSpecifier:STRUCT OptTag LC DefList RC {$/;"	l
Tag	syntax.y	/^Tag:ID {$$=addnode("Tag",1,$1);}$/;"	l
VARIABLE	operand.h	/^    enum { VARIABLE, CONSTANT, ADDRESS, LABEL, ID_STR, OPERATOR} kind;$/;"	e	enum:Operand_::__anon8
VarDec	syntax.y	/^VarDec:ID {$$=addnode("VarDec",1,$1);}$/;"	l
VarList	syntax.y	/^VarList:ParamDec COMMA VarList {$$=addnode("VarList",3,$1,$2,$3);}$/;"	l
WRITE	operand.h	/^        LABEL_GOTO, READ, WRITE, CALLFUNC, FUNCTION,$/;"	e	enum:InterCode_::__anon10
YYLTYPE	common.h	/^typedef struct YYLTYPE  {  $/;"	s
YYLTYPE	common.h	/^} YYLTYPE;$/;"	t	typeref:struct:YYLTYPE
YYLTYPE::first_column	common.h	/^    int first_column;  $/;"	m	struct:YYLTYPE	access:public
YYLTYPE::first_line	common.h	/^    int first_line;  $/;"	m	struct:YYLTYPE	access:public
YYLTYPE::last_column	common.h	/^    int last_column;  $/;"	m	struct:YYLTYPE	access:public
YYLTYPE::last_line	common.h	/^    int last_line;  $/;"	m	struct:YYLTYPE	access:public
YYLTYPE_IS_DECLARED	common.h	20;"	d
_COMPILERS_CODE_COMMON	common.h	2;"	d
_COMPILERS_CODE_TREE	tree.h	2;"	d
_COMPLIERS_CODE_OPERAND	operand.h	2;"	d
_COMPLIERS_CODE_SEMANTIC	semantic.h	2;"	d
add_read_write	semantic.c	/^void add_read_write(){$/;"	f
add_read_write	semantic.h	/^void add_read_write();$/;"	p	signature:()
addleaf	tree.c	/^void addleaf(char *name){$/;"	f	signature:(char *name)
addleaf	tree.h	/^void addleaf(char *name);$/;"	p	signature:(char *name)
addnode	tree.c	/^treenode* addnode(char* name,int child_num,...){$/;"	f	signature:(char* name,int child_num,...)
addnode	tree.h	/^treenode* addnode(char* name,int child_num,...);$/;"	p	signature:(char* name,int child_num,...)
array	tree.h	/^        struct {struct setype_struct* elem; int size; } array;$/;"	m	union:setype_struct::__anon5	typeref:struct:setype_struct::__anon5::__anon6	access:public
assign	operand.h	/^        struct { Operand *right, *left; } assign;$/;"	m	union:InterCode_::__anon11	typeref:struct:InterCode_::__anon11::__anon12	access:public
basic	tree.h	/^        int basic; \/\/int=0 float=1$/;"	m	union:setype_struct::__anon5	access:public
basicoutput	semantic.c	/^void basicoutput(int bb){$/;"	f	signature:(int bb)
basicoutput	semantic.h	/^void basicoutput(int);$/;"	p	signature:(int)
bindCode	operand.c	/^InterCodes* bindCode(InterCodes* code1,InterCodes* code2){$/;"	f	signature:(InterCodes* code1,InterCodes* code2)
bindCode	operand.h	/^InterCodes* bindCode(InterCodes*,InterCodes*);$/;"	p	signature:(InterCodes*,InterCodes*)
binop	operand.h	/^        struct { Operand *result, *op1, *op2; } binop;$/;"	m	union:InterCode_::__anon11	typeref:struct:InterCode_::__anon11::__anon13	access:public
character	tree.h	/^        char character[32];$/;"	m	union:treenode::__anon1	access:public
child	tree.h	/^    struct treenode* child;$/;"	m	struct:treenode	typeref:struct:treenode::treenode	access:public
code	operand.h	/^    struct InterCode_ code; $/;"	m	struct:InterCodes_	typeref:struct:InterCodes_::InterCode_	access:public
deal_func_use	semantic.c	/^void deal_func_use(treenode* root,funcnode* goalnode){$/;"	f	signature:(treenode* root,funcnode* goalnode)
deal_func_use	semantic.h	/^void deal_func_use(treenode*,funcnode*);$/;"	p	signature:(treenode*,funcnode*)
elem	tree.h	/^        struct {struct setype_struct* elem; int size; } array;$/;"	m	struct:setype_struct::__anon5::__anon6	typeref:struct:setype_struct::__anon5::__anon6::setype_struct	access:public
exp_float	tree.h	/^        float exp_float;$/;"	m	union:treenode::__anon3	access:public
exp_int	tree.h	/^        int exp_int;$/;"	m	union:treenode::__anon3	access:public
exp_rec	tree.h	/^    }exp_rec;$/;"	m	struct:treenode	typeref:union:treenode::__anon3	access:public
exp_type	tree.h	/^    enum {EINT=0,EFLOAT,EMISS,EAARAY,ESTRUCT}exp_type;   \/\/record the type of exp$/;"	m	struct:treenode	typeref:enum:treenode::__anon2	access:public
field_add	semantic.c	/^void field_add(treenode* root,senode* nextnode,int line){$/;"	f	signature:(treenode* root,senode* nextnode,int line)
field_add	semantic.h	/^void field_add(treenode*,senode*,int);$/;"	p	signature:(treenode*,senode*,int)
fieldlist	tree.h	/^}fieldlist;$/;"	t	typeref:struct:fieldlist_struct
fieldlist_struct	tree.h	/^typedef struct fieldlist_struct{$/;"	s
fieldlist_struct::name	tree.h	/^    char* name; \/\/ 域的名字$/;"	m	struct:fieldlist_struct	access:public
fieldlist_struct::tail	tree.h	/^    struct fieldlist_struct* tail; \/\/ 下一个域$/;"	m	struct:fieldlist_struct	typeref:struct:fieldlist_struct::fieldlist_struct	access:public
fieldlist_struct::type	tree.h	/^    struct setype_struct* type; \/\/ 域的类型$/;"	m	struct:fieldlist_struct	typeref:struct:fieldlist_struct::setype_struct	access:public
find_st_id	semantic.c	/^int find_st_id(senode* root,char* name,int line){$/;"	f	signature:(senode* root,char* name,int line)
find_st_id	semantic.h	/^int find_st_id(senode*,char*,int);$/;"	p	signature:(senode*,char*,int)
first_column	common.h	/^    int first_column;  $/;"	m	struct:YYLTYPE	access:public
first_line	common.h	/^    int first_line;  $/;"	m	struct:YYLTYPE	access:public
funcinfo	tree.h	/^    struct funcnode_struct* funcinfo;$/;"	m	struct:treenode	typeref:struct:treenode::funcnode_struct	access:public
funcnode	tree.h	/^}funcnode;$/;"	t	typeref:struct:funcnode_struct
funcnode_struct	tree.h	/^typedef struct funcnode_struct{$/;"	s
funcnode_struct::kind	tree.h	/^    int kind;\/\/int=0 float=1$/;"	m	struct:funcnode_struct	access:public
funcnode_struct::name	tree.h	/^    char* name;$/;"	m	struct:funcnode_struct	access:public
funcnode_struct::next	tree.h	/^    struct funcnode_struct* next;$/;"	m	struct:funcnode_struct	typeref:struct:funcnode_struct::funcnode_struct	access:public
funcnode_struct::par_num	tree.h	/^    int par_num;$/;"	m	struct:funcnode_struct	access:public
funcnode_struct::para	tree.h	/^    struct senode_struct* para[20]; $/;"	m	struct:funcnode_struct	typeref:struct:funcnode_struct::senode_struct	access:public
get_relop	operand.c	/^op_def get_relop(treenode* root){$/;"	f	signature:(treenode* root)
get_relop	operand.h	/^op_def get_relop(treenode*);$/;"	p	signature:(treenode*)
goal	operand.h	/^        struct { Operand *op1, *op2, *op3, *goal; } jmp;$/;"	m	struct:InterCode_::__anon11::__anon15	access:public
handle_Exp	semantic.c	/^void handle_Exp(treenode* root){$/;"	f	signature:(treenode* root)
handle_Exp	semantic.h	/^void handle_Exp(treenode*);$/;"	p	signature:(treenode*)
hash_find	semantic.c	/^senode* hash_find(char* name){$/;"	f	signature:(char* name)
hash_find	tree.h	/^senode* hash_find(char*);$/;"	p	signature:(char*)
hash_funcfind	semantic.c	/^funcnode* hash_funcfind(char* name){$/;"	f	signature:(char* name)
hash_funcfind	semantic.h	/^funcnode* hash_funcfind(char*);$/;"	p	signature:(char*)
hash_funcinsert	semantic.c	/^void hash_funcinsert(funcnode* info){$/;"	f	signature:(funcnode* info)
hash_funcinsert	semantic.h	/^void hash_funcinsert(funcnode*);$/;"	p	signature:(funcnode*)
hash_init	semantic.c	/^void hash_init(){$/;"	f
hash_init	tree.h	/^void hash_init();$/;"	p	signature:()
hash_insert	semantic.c	/^void hash_insert(senode* info){$/;"	f	signature:(senode* info)
hash_insert	semantic.h	/^void hash_insert(senode*);$/;"	p	signature:(senode*)
hash_pjw	semantic.c	/^uint32_t hash_pjw(char* name){$/;"	f	signature:(char* name)
hash_pjw	semantic.h	/^uint32_t hash_pjw(char*);$/;"	p	signature:(char*)
hashfunctable	tree.h	/^funcnode hashfunctable[16384];$/;"	v
hashtable	tree.h	/^senode hashtable[16384];$/;"	v
info	tree.h	/^    struct senode_struct* info;$/;"	m	struct:treenode	typeref:struct:treenode::senode_struct	access:public
jmp	operand.h	/^        struct { Operand *op1, *op2, *op3, *goal; } jmp;$/;"	m	union:InterCode_::__anon11	typeref:struct:InterCode_::__anon11::__anon15	access:public
kind	operand.h	/^        ARG, PARAM, REFASSIGN, DEC } kind;$/;"	m	struct:InterCode_	typeref:enum:InterCode_::__anon10	access:public
kind	operand.h	/^    enum { VARIABLE, CONSTANT, ADDRESS, LABEL, ID_STR, OPERATOR} kind;$/;"	m	struct:Operand_	typeref:enum:Operand_::__anon8	access:public
kind	tree.h	/^    enum { BASIC,ARRAY, STRUCTURE } kind;$/;"	m	struct:setype_struct	typeref:enum:setype_struct::__anon4	access:public
kind	tree.h	/^    int kind;\/\/int=0 float=1$/;"	m	struct:funcnode_struct	access:public
lab_no	operand.h	/^        int lab_no;$/;"	m	union:Operand_::__anon9	access:public
labelnum	operand.h	/^static int labelnum;$/;"	v
last_column	common.h	/^    int last_column;  $/;"	m	struct:YYLTYPE	access:public
last_line	common.h	/^    int last_line;  $/;"	m	struct:YYLTYPE	access:public
left	operand.h	/^        struct { Operand *right, *left; } assign;$/;"	m	struct:InterCode_::__anon11::__anon12	access:public
line	tree.h	/^    int line;$/;"	m	struct:treenode	access:public
main	main.c	/^int main(int argc,char** argv){$/;"	f	signature:(int argc,char** argv)
name	operand.h	/^        char* name;$/;"	m	union:Operand_::__anon9	access:public
name	tree.h	/^    char* name; \/\/ 域的名字$/;"	m	struct:fieldlist_struct	access:public
name	tree.h	/^    char* name;$/;"	m	struct:funcnode_struct	access:public
name	tree.h	/^    char* name;$/;"	m	struct:senode_struct	access:public
name	tree.h	/^    char* name;$/;"	m	struct:treenode	access:public
new_InterCodes	operand.c	/^InterCodes* new_InterCodes(){$/;"	f
new_InterCodes	operand.h	/^InterCodes* new_InterCodes();$/;"	p	signature:()
new_const	operand.c	/^Operand* new_const(int value){$/;"	f	signature:(int value)
new_const	operand.h	/^Operand* new_const(int);$/;"	p	signature:(int)
new_id	operand.c	/^Operand* new_id(char* character){$/;"	f	signature:(char* character)
new_id	operand.h	/^Operand* new_id(char*);$/;"	p	signature:(char*)
new_label	operand.c	/^Operand* new_label(){$/;"	f
new_label	operand.h	/^Operand* new_label();$/;"	p	signature:()
new_opera	operand.c	/^Operand* new_opera(op_def value){$/;"	f	signature:(op_def value)
new_opera	operand.h	/^Operand* new_opera(op_def);$/;"	p	signature:(op_def)
new_temp	operand.c	/^Operand* new_temp(){$/;"	f
new_temp	operand.h	/^Operand* new_temp();$/;"	p	signature:()
newarray	semantic.c	/^void newarray(treenode* root,int bb){$/;"	f	signature:(treenode* root,int bb)
newarray	semantic.h	/^void newarray(treenode*,int);$/;"	p	signature:(treenode*,int)
newdefst	semantic.c	/^void newdefst(treenode* root){$/;"	f	signature:(treenode* root)
newdefst	semantic.h	/^void newdefst(treenode*);$/;"	p	signature:(treenode*)
newfunc	semantic.c	/^void newfunc(treenode* root,int bb){$/;"	f	signature:(treenode* root,int bb)
newfunc	semantic.h	/^void newfunc(treenode*,int);$/;"	p	signature:(treenode*,int)
newkind	semantic.c	/^void newkind(treenode* root,int bb){$/;"	f	signature:(treenode* root,int bb)
newkind	semantic.h	/^void newkind(treenode*,int);$/;"	p	signature:(treenode*,int)
newpara	semantic.c	/^void newpara(treenode* root,int bb){$/;"	f	signature:(treenode* root,int bb)
newpara	semantic.h	/^void newpara(treenode*,int);$/;"	p	signature:(treenode*,int)
newparast	semantic.c	/^void newparast(treenode* root){    $/;"	f	signature:(treenode* root)
newparast	semantic.h	/^void newparast(treenode*);$/;"	p	signature:(treenode*)
newst	semantic.c	/^void newst(treenode* root){$/;"	f	signature:(treenode* root)
newst	semantic.h	/^void newst(treenode*);$/;"	p	signature:(treenode*)
next	operand.h	/^    struct InterCodes_ *prev, *next;$/;"	m	struct:InterCodes_	typeref:struct:InterCodes_::	access:public
next	tree.h	/^    struct funcnode_struct* next;$/;"	m	struct:funcnode_struct	typeref:struct:funcnode_struct::funcnode_struct	access:public
next	tree.h	/^    struct senode_struct* next;$/;"	m	struct:senode_struct	typeref:struct:senode_struct::senode_struct	access:public
op1	operand.h	/^        struct { Operand *op1, *op2, *op3, *goal; } jmp;$/;"	m	struct:InterCode_::__anon11::__anon15	access:public
op1	operand.h	/^        struct { Operand *result, *op1, *op2; } binop;$/;"	m	struct:InterCode_::__anon11::__anon13	access:public
op2	operand.h	/^        struct { Operand *op1, *op2, *op3, *goal; } jmp;$/;"	m	struct:InterCode_::__anon11::__anon15	access:public
op2	operand.h	/^        struct { Operand *result, *op1, *op2; } binop;$/;"	m	struct:InterCode_::__anon11::__anon13	access:public
op3	operand.h	/^        struct { Operand *op1, *op2, *op3, *goal; } jmp;$/;"	m	struct:InterCode_::__anon11::__anon15	access:public
op_def	operand.h	/^typedef enum {GT, LT, EQ, GE, LE, NE} op_def;$/;"	t	typeref:enum:__anon7
op_num	operand.h	/^        op_def op_num;$/;"	m	union:Operand_::__anon9	access:public
operand_init	operand.c	/^void operand_init(){$/;"	f
operand_init	tree.h	/^void operand_init();$/;"	p	signature:()
operand_traversal	operand.c	/^void operand_traversal(treenode* root){$/;"	f	signature:(treenode* root)
operand_traversal	tree.h	/^void operand_traversal(treenode*);$/;"	p	signature:(treenode*)
operanddeal	operand.c	/^void operanddeal(Operand* op){$/;"	f	signature:(Operand* op)
operanddeal	operand.h	/^void operanddeal(Operand*);$/;"	p	signature:(Operand*)
operandoutput	operand.c	/^void operandoutput(InterCodes* codelist){$/;"	f	signature:(InterCodes* codelist)
operandoutput	operand.h	/^void operandoutput(InterCodes*);$/;"	p	signature:(InterCodes*)
par_num	tree.h	/^    int par_num;$/;"	m	struct:funcnode_struct	access:public
para	tree.h	/^    struct senode_struct* para[20]; $/;"	m	struct:funcnode_struct	typeref:struct:funcnode_struct::senode_struct	access:public
prev	operand.h	/^    struct InterCodes_ *prev, *next;$/;"	m	struct:InterCodes_	typeref:struct:InterCodes_::InterCodes_	access:public
rawtext	tree.h	/^    char rawtext[32];$/;"	m	struct:treenode	access:public
result	operand.h	/^        struct { Operand *result, *op1, *op2; } binop;$/;"	m	struct:InterCode_::__anon11::__anon13	access:public
result	operand.h	/^        struct { Operand *result; } sigop;$/;"	m	struct:InterCode_::__anon11::__anon14	access:public
returnline	tree.h	/^    int returnline;$/;"	m	struct:treenode	access:public
right	operand.h	/^        struct { Operand *right, *left; } assign;$/;"	m	struct:InterCode_::__anon11::__anon12	access:public
semantic_traversal	semantic.c	/^void semantic_traversal(treenode* root){$/;"	f	signature:(treenode* root)
semantic_traversal	tree.h	/^void semantic_traversal(treenode*);$/;"	p	signature:(treenode*)
senode	tree.h	/^}senode;$/;"	t	typeref:struct:senode_struct
senode_struct	tree.h	/^typedef struct senode_struct{$/;"	s
senode_struct::name	tree.h	/^    char* name;$/;"	m	struct:senode_struct	access:public
senode_struct::next	tree.h	/^    struct senode_struct* next;$/;"	m	struct:senode_struct	typeref:struct:senode_struct::senode_struct	access:public
senode_struct::struct_name	tree.h	/^    char* struct_name;$/;"	m	struct:senode_struct	access:public
senode_struct::type	tree.h	/^    struct setype_struct* type;$/;"	m	struct:senode_struct	typeref:struct:senode_struct::setype_struct	access:public
setype	tree.h	/^}setype;$/;"	t	typeref:struct:setype_struct
setype_struct	tree.h	/^typedef struct setype_struct{$/;"	s
setype_struct::ARRAY	tree.h	/^    enum { BASIC,ARRAY, STRUCTURE } kind;$/;"	e	enum:setype_struct::__anon4
setype_struct::BASIC	tree.h	/^    enum { BASIC,ARRAY, STRUCTURE } kind;$/;"	e	enum:setype_struct::__anon4
setype_struct::STRUCTURE	tree.h	/^    enum { BASIC,ARRAY, STRUCTURE } kind;$/;"	e	enum:setype_struct::__anon4
setype_struct::__anon5::__anon6::elem	tree.h	/^        struct {struct setype_struct* elem; int size; } array;$/;"	m	struct:setype_struct::__anon5::__anon6	typeref:struct:setype_struct::__anon5::__anon6::setype_struct	access:public
setype_struct::__anon5::__anon6::size	tree.h	/^        struct {struct setype_struct* elem; int size; } array;$/;"	m	struct:setype_struct::__anon5::__anon6	access:public
setype_struct::__anon5::array	tree.h	/^        struct {struct setype_struct* elem; int size; } array;$/;"	m	union:setype_struct::__anon5	typeref:struct:setype_struct::__anon5::__anon6	access:public
setype_struct::__anon5::basic	tree.h	/^        int basic; \/\/int=0 float=1$/;"	m	union:setype_struct::__anon5	access:public
setype_struct::__anon5::structure	tree.h	/^        struct fieldlist_struct* structure;$/;"	m	union:setype_struct::__anon5	typeref:struct:setype_struct::__anon5::fieldlist_struct	access:public
setype_struct::kind	tree.h	/^    enum { BASIC,ARRAY, STRUCTURE } kind;$/;"	m	struct:setype_struct	typeref:enum:setype_struct::__anon4	access:public
sibling	tree.h	/^    struct treenode* sibling;$/;"	m	struct:treenode	typeref:struct:treenode::treenode	access:public
sigop	operand.h	/^        struct { Operand *result; } sigop;$/;"	m	union:InterCode_::__anon11	typeref:struct:InterCode_::__anon11::__anon14	access:public
size	tree.h	/^        struct {struct setype_struct* elem; int size; } array;$/;"	m	struct:setype_struct::__anon5::__anon6	access:public
struct_name	tree.h	/^    char* struct_name;$/;"	m	struct:senode_struct	access:public
structure	tree.h	/^        struct fieldlist_struct* structure;$/;"	m	union:setype_struct::__anon5	typeref:struct:setype_struct::__anon5::fieldlist_struct	access:public
tail	tree.h	/^    struct fieldlist_struct* tail; \/\/ 下一个域$/;"	m	struct:fieldlist_struct	typeref:struct:fieldlist_struct::fieldlist_struct	access:public
translate_Args	operand.c	/^InterCodes* translate_Args(treenode* root, Operand** arg_list,int* length){$/;"	f	signature:(treenode* root, Operand** arg_list,int* length)
translate_Args	operand.h	/^InterCodes* translate_Args(treenode*,Operand**,int*);$/;"	p	signature:(treenode*,Operand**,int*)
translate_CompSt	operand.c	/^InterCodes* translate_CompSt(treenode* root){$/;"	f	signature:(treenode* root)
translate_CompSt	operand.h	/^InterCodes* translate_CompSt(treenode*);$/;"	p	signature:(treenode*)
translate_Cond	operand.c	/^InterCodes* translate_Cond(treenode* root,Operand* l_true,Operand* l_false){$/;"	f	signature:(treenode* root,Operand* l_true,Operand* l_false)
translate_Cond	operand.h	/^InterCodes* translate_Cond(treenode*,Operand*,Operand*);$/;"	p	signature:(treenode*,Operand*,Operand*)
translate_DefList	operand.c	/^InterCodes* translate_DefList(treenode* root){$/;"	f	signature:(treenode* root)
translate_DefList	operand.h	/^InterCodes* translate_DefList(treenode*);$/;"	p	signature:(treenode*)
translate_Exp	operand.c	/^InterCodes* translate_Exp(treenode *root,Operand* op){$/;"	f	signature:(treenode *root,Operand* op)
translate_Exp	operand.h	/^InterCodes* translate_Exp(treenode*,Operand*);$/;"	p	signature:(treenode*,Operand*)
translate_ExtDef	operand.c	/^InterCodes* translate_ExtDef(treenode* root){$/;"	f	signature:(treenode* root)
translate_ExtDef	operand.h	/^InterCodes* translate_ExtDef(treenode*);$/;"	p	signature:(treenode*)
translate_ExtDefList	operand.c	/^InterCodes* translate_ExtDefList(treenode* root){$/;"	f	signature:(treenode* root)
translate_ExtDefList	operand.h	/^InterCodes* translate_ExtDefList(treenode*);$/;"	p	signature:(treenode*)
translate_FunDec	operand.c	/^InterCodes* translate_FunDec(treenode* root){$/;"	f	signature:(treenode* root)
translate_FunDec	operand.h	/^InterCodes* translate_FunDec(treenode*);$/;"	p	signature:(treenode*)
translate_ParamDec	operand.c	/^InterCodes* translate_ParamDec(treenode* root){$/;"	f	signature:(treenode* root)
translate_ParamDec	operand.h	/^InterCodes* translate_ParamDec(treenode*);$/;"	p	signature:(treenode*)
translate_Program	operand.c	/^InterCodes* translate_Program(treenode* root){$/;"	f	signature:(treenode* root)
translate_Program	operand.h	/^InterCodes* translate_Program(treenode*);$/;"	p	signature:(treenode*)
translate_Stmt	operand.c	/^InterCodes* translate_Stmt(treenode* root){$/;"	f	signature:(treenode* root)
translate_Stmt	operand.h	/^InterCodes* translate_Stmt(treenode*);$/;"	p	signature:(treenode*)
translate_StmtList	operand.c	/^InterCodes* translate_StmtList(treenode* root){$/;"	f	signature:(treenode* root)
translate_StmtList	operand.h	/^InterCodes* translate_StmtList(treenode*);$/;"	p	signature:(treenode*)
translate_VarList	operand.c	/^InterCodes* translate_VarList(treenode* root){$/;"	f	signature:(treenode* root)
translate_VarList	operand.h	/^InterCodes* translate_VarList(treenode*);$/;"	p	signature:(treenode*)
traversal	tree.c	/^void traversal(treenode* root,int indent){$/;"	f	signature:(treenode* root,int indent)
traversal	tree.h	/^void traversal(treenode* root,int indent);$/;"	p	signature:(treenode* root,int indent)
treenode	tree.h	/^typedef struct treenode {$/;"	s
treenode	tree.h	/^}treenode;$/;"	t	typeref:struct:treenode
treenode::EAARAY	tree.h	/^    enum {EINT=0,EFLOAT,EMISS,EAARAY,ESTRUCT}exp_type;   \/\/record the type of exp$/;"	e	enum:treenode::__anon2
treenode::EFLOAT	tree.h	/^    enum {EINT=0,EFLOAT,EMISS,EAARAY,ESTRUCT}exp_type;   \/\/record the type of exp$/;"	e	enum:treenode::__anon2
treenode::EINT	tree.h	/^    enum {EINT=0,EFLOAT,EMISS,EAARAY,ESTRUCT}exp_type;   \/\/record the type of exp$/;"	e	enum:treenode::__anon2
treenode::EMISS	tree.h	/^    enum {EINT=0,EFLOAT,EMISS,EAARAY,ESTRUCT}exp_type;   \/\/record the type of exp$/;"	e	enum:treenode::__anon2
treenode::ESTRUCT	tree.h	/^    enum {EINT=0,EFLOAT,EMISS,EAARAY,ESTRUCT}exp_type;   \/\/record the type of exp$/;"	e	enum:treenode::__anon2
treenode::__anon1::character	tree.h	/^        char character[32];$/;"	m	union:treenode::__anon1	access:public
treenode::__anon1::type_float	tree.h	/^        float type_float;$/;"	m	union:treenode::__anon1	access:public
treenode::__anon1::type_int	tree.h	/^        int type_int;$/;"	m	union:treenode::__anon1	access:public
treenode::__anon3::exp_float	tree.h	/^        float exp_float;$/;"	m	union:treenode::__anon3	access:public
treenode::__anon3::exp_int	tree.h	/^        int exp_int;$/;"	m	union:treenode::__anon3	access:public
treenode::child	tree.h	/^    struct treenode* child;$/;"	m	struct:treenode	typeref:struct:treenode::treenode	access:public
treenode::exp_rec	tree.h	/^    }exp_rec;$/;"	m	struct:treenode	typeref:union:treenode::__anon3	access:public
treenode::exp_type	tree.h	/^    enum {EINT=0,EFLOAT,EMISS,EAARAY,ESTRUCT}exp_type;   \/\/record the type of exp$/;"	m	struct:treenode	typeref:enum:treenode::__anon2	access:public
treenode::funcinfo	tree.h	/^    struct funcnode_struct* funcinfo;$/;"	m	struct:treenode	typeref:struct:treenode::funcnode_struct	access:public
treenode::info	tree.h	/^    struct senode_struct* info;$/;"	m	struct:treenode	typeref:struct:treenode::senode_struct	access:public
treenode::line	tree.h	/^    int line;$/;"	m	struct:treenode	access:public
treenode::name	tree.h	/^    char* name;$/;"	m	struct:treenode	access:public
treenode::rawtext	tree.h	/^    char rawtext[32];$/;"	m	struct:treenode	access:public
treenode::returnline	tree.h	/^    int returnline;$/;"	m	struct:treenode	access:public
treenode::sibling	tree.h	/^    struct treenode* sibling;$/;"	m	struct:treenode	typeref:struct:treenode::treenode	access:public
type	tree.h	/^    struct setype_struct* type; \/\/ 域的类型$/;"	m	struct:fieldlist_struct	typeref:struct:fieldlist_struct::setype_struct	access:public
type	tree.h	/^    struct setype_struct* type;$/;"	m	struct:senode_struct	typeref:struct:senode_struct::setype_struct	access:public
type_float	tree.h	/^        float type_float;$/;"	m	union:treenode::__anon1	access:public
type_int	tree.h	/^        int type_int;$/;"	m	union:treenode::__anon1	access:public
u	operand.h	/^    } u;$/;"	m	struct:InterCode_	typeref:union:InterCode_::__anon11	access:public
u	operand.h	/^    } u;$/;"	m	struct:Operand_	typeref:union:Operand_::__anon9	access:public
uint32_t	common.h	/^typedef unsigned int uint32_t;$/;"	t
value	operand.h	/^        int value;$/;"	m	union:Operand_::__anon9	access:public
var_no	operand.h	/^        int var_no;$/;"	m	union:Operand_::__anon9	access:public
varnum	operand.h	/^static int varnum;$/;"	v
